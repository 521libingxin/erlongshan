"use strict";
var extend = require('xtend');
var readProjectConfig_1 = require('./readProjectConfig');
var error_1 = require('./error');
function resolveAll(options) {
    return readProjectConfig_1.readJspmPackageJson(options)
        .then(function (pjson) {
        return resolveByPackageJson(pjson, options);
    });
}
exports.resolveAll = resolveAll;
function resolveByPackageJson(pjson, options) {
    return readProjectConfig_1.readJspmConfigs(pjson, options)
        .then(function (configs) {
        var dependencyInfo = getDependencyInfo(configs);
        return readMap(dependencyInfo.map, dependencyInfo.paths, dependencyInfo.packages);
    });
}
exports.resolveByPackageJson = resolveByPackageJson;
function resolve(moduleName, options) {
    return readProjectConfig_1.readJspmPackageJson(options)
        .then(function (pjson) {
        return readProjectConfig_1.readJspmConfigs(pjson, options);
    })
        .then(function (configs) {
        var dependencyInfo = getDependencyInfo(configs);
        var packageName = dependencyInfo.map[moduleName];
        if (!packageName) {
            throw new error_1.ModuleNotFoundError(moduleName);
        }
        return readMap((_a = {}, _a[moduleName] = packageName, _a), dependencyInfo.paths, dependencyInfo.packages)[moduleName];
        var _a;
    });
}
exports.resolve = resolve;
function readMap(map, paths, packages) {
    var result = {};
    for (var moduleName in map) {
        var node = {};
        var packageName = map[moduleName];
        node.path = getModulePath(packageName, paths);
        var pkg = packages[packageName];
        if (pkg && pkg.map) {
            node.map = readMap(pkg.map, paths, packages);
        }
        result[moduleName] = node;
    }
    return result;
}
function getModulePath(packageName, paths) {
    for (var prefix in paths) {
        if (packageName.indexOf(prefix) === 0) {
            return packageName.replace(prefix, paths[prefix]);
        }
    }
    return packageName;
}
function getDependencyInfo(jspmConfigs) {
    var config = extend(jspmConfigs.browser, jspmConfigs.dev, jspmConfigs.jspm, jspmConfigs.node);
    return {
        paths: config.paths,
        map: config.map,
        packages: config.packages
    };
}
//# sourceMappingURL=resolve.js.map