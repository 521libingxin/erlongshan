{"version":3,"file":"resolve.js","sourceRoot":"","sources":["../src/resolve.ts"],"names":[],"mappings":"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","sourcesContent":["import Promise = require('any-promise')\nimport extend = require('xtend')\n\nimport {\n  Options, DependencyBranch, DependencyTree, DependencyInfo, PackageMap, PathMap, ModuleMap, Configs,\n  JspmPackageJson\n} from './interfaces'\nimport { readJspmPackageJson, readJspmConfigs } from './readProjectConfig'\nimport { ModuleNotFoundError } from './error'\n\nexport function resolveAll(options: Options): Promise<DependencyBranch> {\n  return readJspmPackageJson(options)\n    .then(pjson => {\n      return resolveByPackageJson(pjson, options)\n    })\n}\n\nexport function resolveByPackageJson(pjson: JspmPackageJson, options: Options): Promise<DependencyBranch> {\n  return readJspmConfigs(pjson, options)\n    .then(configs => {\n      const dependencyInfo = getDependencyInfo(configs)\n      return readMap(\n        dependencyInfo.map,\n        dependencyInfo.paths,\n        dependencyInfo.packages)\n    })\n}\n\nexport function resolve(moduleName: string, options: Options): Promise<DependencyTree> {\n  return readJspmPackageJson(options)\n    .then(pjson => {\n      return readJspmConfigs(pjson, options)\n    })\n    .then(configs => {\n      const dependencyInfo = getDependencyInfo(configs)\n      const packageName = dependencyInfo.map[moduleName]\n\n      if (!packageName) {\n        throw new ModuleNotFoundError(moduleName)\n      }\n\n      return readMap(\n        { [moduleName]: packageName },\n        dependencyInfo.paths,\n        dependencyInfo.packages)[moduleName]\n    })\n}\n\nfunction readMap(map: ModuleMap, paths: PathMap, packages: PackageMap) {\n  const result: DependencyBranch = {}\n  for (let moduleName in map) {\n    const node: DependencyTree = {} as any\n    const packageName = map[moduleName]\n    node.path = getModulePath(packageName, paths)\n    const pkg = packages[packageName]\n    if (pkg && pkg.map) {\n      node.map = readMap(pkg.map, paths, packages)\n    }\n    result[moduleName] = node\n  }\n\n  return result\n}\nfunction getModulePath(packageName: string, paths: PathMap) {\n  for (let prefix in paths) {\n    if (packageName.indexOf(prefix) === 0) {\n      return packageName.replace(prefix, paths[prefix])\n    }\n  }\n  return packageName\n}\nfunction getDependencyInfo(jspmConfigs: Configs): DependencyInfo {\n  const config = extend(\n    jspmConfigs.browser,\n    jspmConfigs.dev,\n    jspmConfigs.jspm,\n    jspmConfigs.node)\n  return {\n    paths: config.paths,\n    map: config.map,\n    packages: config.packages\n  }\n}\n"]}